{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joe mama\\\\bootcamp\\\\Brew-tique\\\\client\\\\src\\\\App.js\";\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './App.css';\nimport Home from './pages/Home';\n// import CreateUser from './pages/CreateUser';\nimport Login from './pages/Login';\n// import Cart from './components/Cart';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n// import Products from './components/Products';\nimport User from './components/User';\n// import { Cart, Footer, Header, Products, User } from './components';\n\n// / Construct our main GraphQL API endpoint\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nfunction App() {\n  // TODO update naming of my account. Maybe user profile? Fix all pathing on it when done\n\n  // not sure if path='/myaccount/:userId' will work yet or if it's needed\n\n  // rendering the components\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 44\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/products\",\n            element: /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/myaccount\",\n            element: /*#__PURE__*/_jsxDEV(User, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","BrowserRouter","Router","Routes","Route","Home","Login","Footer","Header","User","jsxDEV","_jsxDEV","httpLink","uri","authLink","_","_ref","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","Products","_c","$RefreshReg$"],"sources":["C:/Users/joe mama/bootcamp/Brew-tique/client/src/App.js"],"sourcesContent":["import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './pages/Home';\n// import CreateUser from './pages/CreateUser';\nimport Login from './pages/Login';\n// import Cart from './components/Cart';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n// import Products from './components/Products';\nimport User from './components/User';\n// import { Cart, Footer, Header, Products, User } from './components';\n\n// / Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n// TODO update naming of my account. Maybe user profile? Fix all pathing on it when done\n\n// not sure if path='/myaccount/:userId' will work yet or if it's needed\n\n  // rendering the components\n  return (\n\n    <ApolloProvider client={client}>\n      <Router>\n        <main>\n          <Header />\n          <Routes>\n            <Route path='/' element={<Home />} />\n            {/* <Route path='/cart' element= {<Cart />} /> */}\n            <Route path='/login' element= {<Login />} />\n            {/* <Route path='/signup' element= {<CreateUser />} /> */}\n            <Route path='/products' element= {<Products />} />\n            <Route path='/myaccount' element={<User />} />\n              {/* <Route path='/myaccount/:userId' element= {<Cart />} /> */}\n          </Routes>\n          <Footer />\n        </main>\n\n      </Router>\n\n    </ApolloProvider >\n  );\n}\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}